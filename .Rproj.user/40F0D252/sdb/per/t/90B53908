{
    "collab_server" : "",
    "contents" : "install.packages(\"warbleR\")\nlibrary(warbleR)\nlibrary(ggplot2)\n\ndir.create(file.path(getwd(),\"warbleR_templates\"))\nsetwd(file.path(getwd(),\"warbleR_templates\"))\ngetwd()\n\n## Query to find BITH recordings:\nCat.bick <- querxc(qword = \"Catharus bicknelli\", download = FALSE)\n\n## Limit to recordings from Mansfield:\nCat.bick <- Cat.bick[grep(\"Mt Mansfield, Vermont|Stowe\", Cat.bick$Locality, ignore.case = FALSE),]\n\n## Download this subset of recordings (from Mansfield or Stowe)\nquerxc(X = Cat.bick)\n\n## Convert mp3 to wav (make sure you are in the right working directory, \n## as the function takes no arguments):\nmp32wav()\n\n## Used the interactive mode to find a BITH call in the file, zoom in so it was\n## the only call on the screen, and then save the screen as a WAV file.\n## \"/Users/johnlloyd/GitHub/BITH_Maine/warbleR_templates/Catharus-bicknelli-160920_8.4375-10.3125.wav\"\nviewSpec(clip=list.files(getwd())[5], interactive = TRUE, frq.lim = c(1,15), spec.col = gray.3())\n\n## Turn this into a template:\nbithTemplate1 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/warbleR_templates/Catharus-bicknelli-160920_8.4375-10.3125.wav\",\n                                 frq.lim = c(2,8), name = \"call\")\nbithTemplate1 \nplot(bithTemplate1)\ncscores <-corMatch(survey = list.files(getwd())[3], templates = bithTemplate1,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncscores \ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\n\n## This detects many, but not all calls, and it seems like reducing the score threshold\n## would help.\ntemplateCutoff(bithTemplate1)[1] <- c(call = 0.28)\n\n## What about trying this on a real survey?\nviewSpec(clip = \"S4A01556_20170605_202700.wav\",interactive = FALSE)\ncscores <-corMatch(survey = \"S4A01556_20170605_202700.wav\", templates = bithTemplate1,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncscores\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\n\n## Finds a lot of false positives, where part of a SWTH song is registering as a detection.\n\n## Let's try a different survey:\ntemplateCutoff(bithTemplate1)[1] <- c(call = 0.4)\ncscores <-corMatch(survey = \"S4A01556_20170608_042600.wav\", templates = bithTemplate1,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncscores\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects@detections\nshowPeaks(cdetects, id = 3)\n\n\n## The bith template finds a lot of MAWA by accident. Curious to see what happens with a real MAWA template:\nmawaTemplate1 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/warbleR_templates/MAWA.wav\",\n                                 frq.lim = c(1,8), name = \"MAWAsong\")\n\ncscores <-corMatch(survey = \"S4A01556_20170608_042600.wav\", templates = mawaTemplate1,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects@detections\nshowPeaks(cdetects)\n\n## Let's try a BITH song\nbithTemplate1 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/BITHsong1.wav\",\n                                 name = \"s1\")\nbithTemplate2 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/BITHsong2.wav\",\n                                 name = \"s2\", frq.lim = c(2.5,9)) ##frq.lim settings can greatly affect results! \nbithTemplate3 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/BITHsong3.wav\",\n                                 name = \"s3\")\nbithTemplate4 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/BITHCall1.wav\",\n                                 name = \"c1\", frq.lim = c(3,5.5))\nbithTemplate5 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/BITHsong5.wav\", \n                                 name = \"s4\")\nbithTemplate6 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/BITHsong4.wav\",\n                                 name = \"s5\")\nbithTemps <- combineCorTemplates(bithTemplate1,bithTemplate4)\ntemplateCutoff(bithTemps)\ntemplateCutoff(bithTemps)[1:4] <- c(s1 = 0.28, s2 = 0.28, s3 = 0.28, c1 = 0.1)\n\ncscores <-corMatch(survey = \"S4A01574_20160604_210803.wav\", templates = bithTemps,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\n#cdetects@detections\n#showPeaks(cdetects, what = \"peaks\")\nplot(cdetects)\n## Templates 2 and 3 are not useful, but Template 1 would work if it was set to a\n## score cutoff of ~0.25\npar(mfrow = c(1,3))\nplot(bithTemplate1)\nplot(bithTemplate2)\nplot(bithTemplate3) # I think this template fails because it has lots of bg noise\n\n#Interestingly, the \"Call\" template picks up many songs, too!\n\n#Try this again with the 2 useful templates and cutoffs adjusted\nbithTemps <- combineCorTemplates(bithTemplate1, bithTemplate4)\ntemplateCutoff(bithTemps)\ntemplateCutoff(bithTemps)[1:2] <- c(s1 = 0.25, c1 = 0.1)\ncscores <-corMatch(survey = \"S4A01574_20160604_210803.wav\", templates = bithTemps,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\n\n## I had to change the dbUploadTemplate function because it wasn't working. \n## It was trying to INSERT a \"NULL\" into the pkTemplateID column. That column\n## auto-increments, so works only if the field is left empty. The only way\n## I could figure out how to do this was to change the SQL INSERT command \n## so that it didn't refer at all to pkTemplateID, which effectivel left it blank\n## and able to auto-increment after the INSERT completed.\n\ndbUploadTemplate(templates = bithTemps,\n                 uid = \"root\",\n                 pwd = \"RSW4xN!!\",\n                 db.name = \"noh\",\n                 analyst = 1, \n                 locationID = \"2\",\n                 date.recorded = \"2017/09/07\",\n                 recording.equip = \"Unknown\",\n                 species.code = \"BITH\",\n                 type = \"COR\")\n\ndbDownloadCardRecorderID(db.name = \"noh\", uid = \"root\", pwd = \"RSW4xN!!\")\n\n## Binary point matching\nbithTemplate1 <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/warbleR_templates/BITHsong.wav\",\n                                 name = \"song\")\n\nbscores <- binMatch(survey = \"S4A01556_20170608_042600.wav\", templates = bithTemplate1,\n                    parallel = T, show.prog = TRUE)\n\nbdetects <- findPeaks(bscores)\nshowPeaks(bdetects,id = 150)\n\n###\n\nch <- odbcConnect(dsn=\"noh\", uid = \"root\", pwd = \"RSW4xN!!\")\nsqlTables(ch)\nch\n\n\n",
    "created" : 1504710373536.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1962266951",
    "id" : "90B53908",
    "lastKnownWriteTime" : 1506632699,
    "last_content_update" : 1506632699198,
    "path" : "~/GitHub/BITH_Maine/warbleR_templates/Sandbox.R",
    "project_path" : "warbleR_templates/Sandbox.R",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}