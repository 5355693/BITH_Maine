{
    "collab_server" : "",
    "contents" : "library(warbleR)\nlibrary(ggplot2)\n\n## These templates were downloaded from Xeno-Canto, and were recorded on Mount Mansfield.\nbithTemplate1 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/BITHsong2.wav\",\n                                 name = \"s1\") #, frq.lim = c(2.5,9)) ##frq.lim settings can greatly affect results! \nbithTemplate2 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/BITHCall1.wav\",\n                                 name = \"c1\") #, frq.lim = c(3,5.5))\n\nbithTemps <- combineCorTemplates(bithTemplate1,bithTemplate2)\n\ncscores <-corMatch(survey = \"S4A01574_20160604_210803.wav\", templates = bithTemps,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\n\n## The templates don't work well: the call records peaks everywhere, and the song misses everything.\n## Adjust the frequency limits.\n\nbithTemplate1 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong2.wav\",\n                                 name = \"s2\", frq.lim = c(2,10)) ##frq.lim settings can greatly affect results! \nbithTemplate2 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall1.wav\",\n                                 name = \"c1\", frq.lim = c(3.5,5.5))\n## Add a few more clipped from a Mansfield ARD, with noise reduction applied in Audacity\nbithTemplate3 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong3.wav\",\n                                 name = \"s3\", frq.lim = c(4,9)) ##frq.lim settings can greatly affect results! \nbithTemplate4 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong4.wav\",\n                                 name = \"s4\", frq.lim = c(2,10))\nbithTemplate5 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong5.wav\",\n                                 name = \"s5\", frq.lim = c(2,10))\nbithTemplate6 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong6.wav\",\n                                 name = \"s6\", frq.lim = c(2,10)) ##frq.lim settings can greatly affect results! \n#bithTemplate7 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall2.wav\",\n#                                 name = \"c2\", frq.lim = c(3,7))\nbithTemplate8 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall3.wav\",\n                                 name = \"c3\", frq.lim = c(3,4.75))\nbithTemplate9 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall4.wav\",\n                                 name = \"c4\", frq.lim = c(2,7))\nbithTemplate10 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall5.wav\",\n                                 name = \"c5\", frq.lim = c(2,7))\nbithTemplate11 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall6.wav\",\n                                  name = \"c6\", frq.lim = c(2,8))\nbithTemplate12 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong1.wav\",\n                                  name = \"s1\", frq.lim = c(2,10))\nbithTemplate13 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong7.wav\",\n                                  name = \"s7\", frq.lim = c(3,9))\nbithTemplate14 <- makeCorTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong8.wav\",\n                                  name = \"s8\", frq.lim = c(4.5,8))\n\nbithTemps <- combineCorTemplates(bithTemplate8, bithTemplate13, bithTemplate14)\n\n\ncscores <-corMatch(survey = \"S4A01574_20160604_210803.wav\", templates = bithTemplate14,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\ngetDetections(cdetects)\nplot(cdetects)\n\n## Call 4 seems to find a lot of non-BITH calls. Also noteworthy how poorly the song\n## recognizers work.\n\n##How perform with a Maine recording\n## c3 = 23; s7 = 0, s8 = 3\ncscores <-corMatch(survey = \"/Volumes/Untitled/W33L13_2017-06-07_045300_EDT.wav\",\n                   templates = bithTemps,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects, t.each = 120)\ngetDetections(cdetects)\n\n##How perform with a MANS recording\n## c3 = 100; s7 = 7, s8 = 6\ncscores <-corMatch(survey = \"S4A01574_20160604_210803.wav\",\n                   templates = bithTemps,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\ngetDetections(cdetects)\n\n## Similar pattern here: Call 4 has numerous false positives, many of which are coming\n## on Magnolia Warbler songs and Fox Sparrow songs. Call 3 works well: it picks up 3 \n## odd, churry SWTH calls and 2 cracking branches that made noise that cover the spectrum - \n## every recognizer picked up those. On the Mansfield recording with BITH, it detected 100\n## calls - on this recoring, w/out BITH, it detected only 5. The other recognizers didn't\n## show the same level of sensitivity.\n\n## Try another one.\n## Works pretty well.\ncscores <-corMatch(survey = \"/Volumes/Untitled/W33L13_2017-06-05_212800_EDT.wav\",\n                   templates = bithTemps,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\ngetDetections(cdetects)\n\n## Again, c4 overdetects, finding many SWTH calls.\n## c3 finds 7 SWTH calls, which interestingly are \"whit-burr\" calls,\n## which seem to elicit particular confusion with the template. \n\ncscores <-corMatch(survey = \"/Volumes/Untitled/W33L13_2017-06-06_045400_EDT.wav\",\n                   templates = bithTemps,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\ngetDetections(cdetects)\n\n## This one is harder, with even the well-performing c3 picking up many false negatives, \n## including the usual SWTH \"churr\" call but also a BHVI song. \ncscores <-corMatch(survey = \"/Volumes/Untitled/W33L13_2017-06-06_055400_EDT.wav\",\n                   templates = bithTemps,\n                   parallel = T, show.prog = TRUE, cor.method = \"pearson\")\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\ngetDetections(cdetects)\nbithTemplate1.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong2.wav\",\n                                 name = \"s2\", frq.lim = c(4,8)) ##frq.lim settings can greatly affect results! \nbithTemplate2.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall1.wav\",\n                                 name = \"c1\", frq.lim = c(3.5,5.5))\n## Add a few more clipped from a Mansfield ARD, with noise reduction applied in Audacity\nbithTemplate3.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong3.wav\",\n                                 name = \"s3\", frq.lim = c(4.5,7.5)) ##frq.lim settings can greatly affect results! \nbithTemplate4.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong4.wav\",\n                               name = \"s4\", frq.lim = c(3,9))\nbithTemplate5.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong5.wav\",\n                                 name = \"s5\", frq.lim = c(3,8))\nbithTemplate6.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong6.wav\",\n                                 name = \"s6\", frq.lim = c(3,8)) ##frq.lim settings can greatly affect results! \nbithTemplate7.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall2.wav\",\n                               name = \"c2\", frq.lim = c(4,5.5))\nbithTemplate8.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall3.wav\",\n                                 name = \"c3\", frq.lim = c(3,4.75))\nbithTemplate9.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall4.wav\",\n                                 name = \"c4\", frq.lim = c(3.5,5.5))\nbithTemplate10.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall5.wav\",\n                                  name = \"c5\", frq.lim = c(2,6))\nbithTemplate11.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithCall6.wav\",\n                                  name = \"c6\", frq.lim = c(2,6))\nbithTemplate12.b <- makeBinTemplate(clip = \"/Users/johnlloyd/GitHub/BITH_Maine/bithSong1.wav\",\n                                  name = \"s1\", frq.lim = c(3,8))\n\nbithTemps.b <- combineBinTemplates(bithTemplate1.b,bithTemplate2.b, bithTemplate3.b,\n                                 bithTemplate4.b, bithTemplate5.b, bithTemplate6.b, bithTemplate7.b,\n                                 bithTemplate8.b, bithTemplate9.b, bithTemplate10.b, bithTemplate11.b,\n                                 bithTemplate12.b)\n\n##How does a binary template work? Finds nothing on the Maine site.\ncscores <-binMatch(survey = \"/Volumes/Untitled/W33L13_2017-06-05_212800_EDT.wav\",\n                   templates = bithTemps.b,\n                   parallel = T, show.prog = TRUE)\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\ngetDetections(cdetects)\n\n##How about Mansfield? Doesn't seem to work nearly as well - c3 has only 12 detections~\ncscores <-binMatch(survey = \"S4A01574_20160604_210803.wav\", templates = bithTemps.b,\n                   parallel = T, show.prog = TRUE)\ncdetects <- findPeaks(score.obj = cscores, parallel = T)\ncdetects\nplot(cdetects)\ngetDetections(cdetects)\n\n## To upload this template, I need to create my own version of the function in monitoR. \n## The default dbUploadTemplate function doesn't work, because it tries \n## to INSERT a \"NULL\" into the pkTemplateID column. That column\n## auto-increments, so works only if the field is left empty. The only way\n## I could figure out how to do this was to change the SQL INSERT command \n## so that it didn't refer at all to pkTemplateID, which effectivel left it blank\n## and able to auto-increment after the INSERT completed.\n\ndbUploadTemplate <- \n  function (templates, which.one, db.name = \"acoustics\", uid, pwd, \n            analyst, locationID = \"\", date.recorded = \"\", recording.equip = \"\", \n            species.code, type, ...) \n  {\n    if (!requireNamespace(\"RODBC\", quietly = TRUE)) {\n      stop(\"The RODBC package is needed to use this function, but it is not installed. Please install it.\", \n           call. = FALSE)\n    }\n    start.time <- Sys.time()\n    if (tolower(type) %in% c(\"bin\", \"bt\", \"binary\", \"b\")) {\n      type <- \"BIN\"\n    }\n    else if (tolower(type) %in% c(\"cor\", \"ct\", \"correlation\", \n                                  \"c\")) {\n      type <- \"COR\"\n    }\n    else stop(\"Did not recognize type, was it BIN or COR?\")\n    if (missing(uid) && missing(pwd)) {\n      dbCon <- RODBC::odbcConnect(db.name, ...)\n    }\n    else if (missing(pwd)) {\n      dbCon <- RODBC::odbcConnect(db.name, pwd, ...)\n    }\n    else dbCon <- RODBC::odbcConnect(db.name, uid, pwd, ...)\n    on.exit(close(dbCon))\n    if (missing(which.one)) \n      template.L <- templates@templates\n    else template.L <- templates@templates[names(templates@templates) == \n                                             which.one]\n    if (length(species.code) > 1 & length(species.code) != length(names(template.L))) \n      stop(\"You entered \", length(species.code), \" species codes but are uploading \", \n           length(names(template.L)), \" templates, this can't be right.\")\n    species <- RODBC::sqlQuery(dbCon, paste(\"SELECT `pkSpeciesID`, `fldSpeciesCode` FROM `tblSpecies` WHERE `fldSpeciesCode` = '\", \n                                            paste(species.code, sep = \"\", collapse = \"' OR `fldSpeciesCode` = '\"), \n                                            \"'\", sep = \"\"))\n    speciesID <- NULL\n    for (i in 1:length(species.code)) {\n      speciesID[i] <- species$pkSpeciesID[species$fldSpeciesCode == \n                                            species.code[i]]\n    }\n    clips <- lapply(template.L, function(x) x@clip.path)\n    srates <- lapply(template.L, function(x) x@samp.rate)\n    if (type == \"BIN\") {\n      pts.on <- lapply(template.L, function(x) x@pt.on)\n    }\n    if (type == \"BIN\") {\n      pts.off <- lapply(template.L, function(x) x@pt.off)\n    }\n    if (type == \"COR\") {\n      pts <- lapply(template.L, function(x) x@pts)\n    }\n    t.steps <- lapply(template.L, function(x) x@t.step)\n    frq.steps <- lapply(template.L, function(x) x@frq.step)\n    n.t.bins <- lapply(template.L, function(x) x@n.t.bins)\n    first.t.bin <- lapply(template.L, function(x) x@first.t.bin)\n    n.frq.bins <- lapply(template.L, function(x) x@n.frq.bins)\n    durations <- lapply(template.L, function(x) x@duration)\n    frq.lims <- lapply(template.L, function(x) x@frq.lim)\n    wls <- lapply(template.L, function(x) x@wl)\n    ovlps <- lapply(template.L, function(x) x@ovlp)\n    wns <- lapply(template.L, function(x) x@wn)\n    score.cutoffs <- lapply(template.L, function(x) x@score.cutoff)\n    comments <- lapply(template.L, function(x) x@comment)\n    if (type == \"BIN\") {\n      pt.on.L <- lapply(template.L, function(x) x@pt.on)\n      pt.off.L <- lapply(template.L, function(x) x@pt.off)\n      pt.on.t <- lapply(pt.on.L, function(x) x[, \"t\"])\n      pt.on.f <- lapply(pt.on.L, function(x) x[, \"frq\"])\n      pt.off.t <- lapply(pt.off.L, function(x) x[, \"t\"])\n      pt.off.f <- lapply(pt.off.L, function(x) x[, \"frq\"])\n    }\n    else if (type == \"COR\") {\n      pts.L <- lapply(template.L, function(x) x@pts)\n      pts.t <- lapply(pts.L, function(x) x[, \"t\"])\n      pts.f <- lapply(pts.L, function(x) x[, \"frq\"])\n      pts.a <- lapply(pts.L, function(x) x[, \"amp\"] * -100)\n    }\n    query <- paste0(\"INSERT INTO `tblTemplate` (`fkSpeciesID`, `fkPersonID`, `fkLocationID`, `fldTemplateName`, `fldRecordingDate`, `fldRecordingEquipment`, `fldClipPath`, `fldSampRate`, `fldPtOnT`, `fldPtOnFrq`, `fldPtOffT`, `fldPtOffFrq`, `fldPtsT`, `fldPtsFrq`, `fldPtsAmp`, `fldTStep`, `fldFrqStep`, `fldNTBins`, `fldFirstTBin`, `fldNFrqBins`, `fldDuration`, `fldFrqLim`, `fldFFTwl`, `fldFFTovlp`, `fldFFTwn`, `fldScoreCutoff`, `fldTemplateType`, `fldActive`, `fldComment`) VALUES ('\", \n                    paste0(speciesID, \"', '\", analyst, \"', '\", \n                           locationID, \"', '\", names(template.L), \"', '\", date.recorded, \n                           \"', '\", recording.equip, \"', '\", clips, \"', '\", srates, \n                           \"', '\", if (type == \"BIN\") {\n                             pt.on.t\n                           }\n                           else {\n                             \"\"\n                           }, \"', '\", if (type == \"BIN\") {\n                             pt.on.f\n                           }\n                           else {\n                             \"\"\n                           }, \"', '\", if (type == \"BIN\") {\n                             pt.off.t\n                           }\n                           else {\n                             \"\"\n                           }, \"', '\", if (type == \"BIN\") {\n                             pt.off.f\n                           }\n                           else {\n                             \"\"\n                           }, \"', '\", if (type == \"COR\") {\n                             pts.t\n                           }\n                           else {\n                             \"\"\n                           }, \"', '\", if (type == \"COR\") {\n                             pts.f\n                           }\n                           else {\n                             \"\"\n                           }, \"', '\", if (type == \"COR\") {\n                             pts.a\n                           }\n                           else {\n                             \"\"\n                           }, \"', '\", t.steps, \"', '\", frq.steps, \"', '\", n.t.bins, \n                           \"', '\", first.t.bin, \"', '\", n.frq.bins, \"', '\", \n                           durations, \"', '\", frq.lims, \"', '\", wls, \"', '\", \n                           ovlps, \"', '\", wns, \"', '\", score.cutoffs, \"', '\", \n                           type, \"', \", 1, \", '\", comments, \"')\", collapse = \", ('\"))\n    message(\"Uploading...\")\n    status <- RODBC::sqlQuery(dbCon, query)\n    message(\"Cleaning up...\")\n    query <- paste(\"UPDATE `tblTemplate` SET `fldPtOnT` = REPLACE( `fldPtOnT` , ' ' , '' ), `fldPtOnFrq` = REPLACE( `fldPtOnFrq` , ' ' , '' ), `fldPtOffT` = REPLACE( `fldPtOffT` , ' ' , '' ), `fldPtOffFrq` = REPLACE( `fldPtOffFrq` , ' ' , '' ), `fldPtsT` = REPLACE( `fldPtsT` , ' ' , '' ), `fldPtsFrq` = REPLACE( `fldPtsFrq` , ' ' , '' ), `fldPtsAmp` = REPLACE( `fldPtsAmp` , ' ' , '' ) WHERE `fldTemplateName` = '\", \n                   names(template.L), \"'\", sep = \"\")\n    lapply(query, function(x) RODBC::sqlQuery(dbCon, x))\n    query <- paste(\"UPDATE `tblTemplate` SET `fldPtOnT` = REPLACE( `fldPtOnT` , '\\\\\\\\n' , '' ), `fldPtOnFrq` = REPLACE( `fldPtOnFrq` , '\\\\\\\\n' , '' ), `fldPtOffT` = REPLACE( `fldPtOffT` , '\\\\\\\\n' , '' ), `fldPtOffFrq` = REPLACE( `fldPtOffFrq` , '\\\\\\\\n' , '' ), `fldPtsT` = REPLACE( `fldPtsT` , '\\\\\\\\n' , '' ), `fldPtsFrq` = REPLACE( `fldPtsFrq` , '\\\\\\\\n' , '' ), `fldPtsAmp` = REPLACE( `fldPtsAmp` , '\\\\\\\\n' , '' ) WHERE `fldTemplateName` = '\", \n                   names(template.L), \"'\", sep = \"\")\n    lapply(query, function(x) RODBC::sqlQuery(dbCon, x))\n    query <- paste(\"UPDATE `tblTemplate` SET `fldPtOnT` = REPLACE( `fldPtOnT` , '\\\\\\\\r' , '' ), `fldPtOnFrq` = REPLACE( `fldPtOnFrq` , '\\\\\\\\r' , '' ), `fldPtOffT` = REPLACE( `fldPtOffT` , '\\\\\\\\r' , '' ), `fldPtOffFrq` = REPLACE( `fldPtOffFrq` , '\\\\\\\\r' , '' ), `fldPtsT` = REPLACE( `fldPtsT` , '\\\\\\\\r' , '' ), `fldPtsFrq` = REPLACE( `fldPtsFrq` , '\\\\\\\\r' , '' ), `fldPtsAmp` = REPLACE( `fldPtsAmp` , '\\\\\\\\r' , '' ) WHERE `fldTemplateName` = '\", \n                   names(template.L), \"'\", sep = \"\")\n    lapply(query, function(x) RODBC::sqlQuery(dbCon, x))\n    message(if (is.na(status[1])) {\n      paste(\"Done! Upload time:\", round(Sys.time() - start.time, \n                                        2), \"seconds\")\n    }\n    else if (status[1] == \"character(0)\") {\n      paste(\"Done! Upload time:\", round(Sys.time() - start.time, \n                                        2), \"seconds\")\n    }\n    else paste(\"Upload unsuccessful; RODBC returned errors: \", \n               paste(status, collapse = \" \")))\n  }\n\ndbUploadTemplate(templates = bithTemps,\n                 uid = \"root\",\n                 pwd = \"RSW4xN!!\",\n                 db.name = \"noh\",\n                 analyst = 1, \n                 locationID = \"2\",\n                 date.recorded = \"2017/09/07\",\n                 recording.equip = \"Unknown\",\n                 species.code = \"BITH\",\n                 type = \"COR\")\n",
    "created" : 1506691078805.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3413259983",
    "id" : "6E34D506",
    "lastKnownWriteTime" : 1507242451,
    "last_content_update" : 1507242451697,
    "path" : "~/GitHub/BITH_Maine/templateCreationAndTesting.R",
    "project_path" : "templateCreationAndTesting.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}